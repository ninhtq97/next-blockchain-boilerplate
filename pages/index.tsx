import Button from 'components/Button';
import Modal from 'components/Modal';
import Pagination from 'components/Pagination';
import Select from 'components/Select';
import Tooltip from 'components/Tooltip';
import { refreshDOM } from 'features/app/appSlice';
import {
  addTxIfNotDuplicate,
  removeTx,
  removeTxIfExist,
  selectTx,
} from 'features/tx/txSlice';
import { selectWeb3 } from 'features/web3/web3Slice';
import { useAppDispatch, useAppSelector } from 'hooks';
import useWeb3 from 'hooks/useWeb3';
import useWeb3Event from 'hooks/useWeb3Event';
import { Layout } from 'layouts';
import NestedLayout from 'layouts/NestedLayout';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Datepicker from 'react-tailwindcss-datepicker';
import { TDateRange } from 'types';
import { delay } from 'utils';
import type { NextPageWithLayout } from './_app';

const Home: NextPageWithLayout = () => {
  const { connect, disconnect } = useWeb3();
  useWeb3Event();
  const dispatch = useAppDispatch();
  const { address, chainId } = useAppSelector(selectWeb3);
  const tx = useAppSelector(selectTx);

  const [value, setValue] = useState<TDateRange>({
    startDate: null,
    endDate: null,
  });

  const handleValueChange = (newValue: TDateRange) => {
    console.log('newValue:', newValue);
    newValue && setValue(newValue);
  };

  useEffect(() => {
    console.log('tx:', tx);
  }, [tx]);

  return (
    <div className="">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="flex flex-col gap-4 absolute top-2 right-2">
        {tx.pending.length > 0 && (
          <div className="bg-black bg-opacity-40">
            <p>Tx Pending</p>
            <a href={`https://bscscan.com/tx/0xfff`}>{tx.pending[0]}</a>
          </div>
        )}

        {tx.complete.length > 0 && (
          <div className="bg-black bg-opacity-40">
            <p>Tx Completed</p>
            <a href={`https://bscscan.com/tx/0xfff`}>{tx.complete[0]}</a>
          </div>
        )}
      </div>

      <Button onClick={() => dispatch(refreshDOM())}>Refresh DOM</Button>
      <Button onClick={() => dispatch(refreshDOM(2))}>Refresh Balance</Button>

      <Button
        onClick={async () => {
          const tx = `0x${Math.random()}`;
          dispatch(addTxIfNotDuplicate({ type: 'pending', tx }));

          await delay(2000);
          dispatch(removeTxIfExist({ type: 'pending', tx }));
          dispatch(addTxIfNotDuplicate({ type: 'complete', tx }));
        }}
      >
        Add Tx Pending
      </Button>
      <Button
        onClick={() =>
          dispatch(removeTxIfExist({ type: 'pending', tx: '0x01' }))
        }
      >
        Remove Tx Pending
      </Button>

      <Button
        onClick={() => {
          const tx = `0x${Math.random()}`;
          dispatch(addTxIfNotDuplicate({ type: 'complete', tx }));
        }}
      >
        Add Tx Complete
      </Button>
      <Button
        onClick={() => dispatch(removeTx({ type: 'complete', tx: '0x01' }))}
      >
        Remove Tx Complete
      </Button>

      <div className="border">
        <Datepicker
          useRange={false}
          asSingle={true}
          value={value}
          onChange={handleValueChange}
        />
      </div>

      <Button onClick={address ? disconnect : connect}>
        {address ? 'Disconnect' : 'Connect'} Wallet
      </Button>

      <Tooltip
        renderLink={({}) => <div>{address}</div>}
        renderContent={() => <div>{address}</div>}
      />
      <div>{chainId}</div>

      <Modal
        renderLink={({ onOpen }) => (
          <div className="" onClick={onOpen}>
            Open Modal
          </div>
        )}
        renderContent={({}) => (
          <div>
            Content Modal
            <Pagination
              current={1}
              total={10}
              onChange={(attrs) => {
                console.log('Attrs:', attrs);
              }}
            />
          </div>
        )}
      />

      <Select
        options={[
          { label: 'A', value: 'a' },
          { label: 'B', value: 'b' },
        ]}
        onChange={(selected) => {
          console.log('Selected:', selected);
        }}
      />
    </div>
  );
};

Home.getLayout = function getLayout(page: React.ReactElement) {
  return (
    <Layout>
      <NestedLayout name="home">{page}</NestedLayout>
    </Layout>
  );
};

export default Home;
