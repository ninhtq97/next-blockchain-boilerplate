import Button from 'components/Button';
import Modal from 'components/Modal';
import Pagination from 'components/Pagination';
import Select from 'components/Select';
import Tooltip from 'components/Tooltip';
import { addDays, subDays } from 'date-fns';
import { refreshDOM } from 'features/app/appSlice';
import {
  addTxIfNotDuplicate,
  removeTx,
  removeTxIfExist,
  selectTx,
} from 'features/tx/txSlice';
import { selectWeb3 } from 'features/web3/web3Slice';
import { motion, Variants } from 'framer-motion';
import { useAppDispatch, useAppSelector } from 'hooks';
import useWeb3 from 'hooks/useWeb3';
import useWeb3Event from 'hooks/useWeb3Event';
import { Layout } from 'layouts';
import NestedLayout from 'layouts/NestedLayout';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Datepicker from 'react-tailwindcss-datepicker';
import { TDateRange } from 'types';
import { delay } from 'utils';
import type { NextPageWithLayout } from './_app';

const itemVariants: Variants = {
  open: {
    opacity: 1,
    y: 0,
    transition: { type: 'spring', stiffness: 300, damping: 24 },
  },
  closed: { opacity: 0, y: 20, transition: { duration: 0.2 } },
};

const Home: NextPageWithLayout = () => {
  const { connect, disconnect } = useWeb3();
  useWeb3Event();
  const dispatch = useAppDispatch();
  const { address, chainId } = useAppSelector(selectWeb3);
  const tx = useAppSelector(selectTx);

  const [isOpen, setIsOpen] = useState(false);

  const [value, setValue] = useState<TDateRange>({
    startDate: null,
    endDate: null,
  });

  const handleValueChange = (newValue: TDateRange) => {
    console.log('newValue:', newValue);
    newValue && setValue(newValue);
  };

  useEffect(() => {
    console.log('tx:', tx);
  }, [tx]);

  return (
    <div className="">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="flex flex-col gap-4 absolute top-2 right-2">
        {tx.pending.length > 0 && (
          <div className="bg-black bg-opacity-40">
            <p>Tx Pending</p>
            <a href={`https://bscscan.com/tx/0xfff`}>{tx.pending[0]}</a>
          </div>
        )}

        {tx.complete.length > 0 && (
          <div className="bg-black bg-opacity-40">
            <p>Tx Completed</p>
            <a href={`https://bscscan.com/tx/0xfff`}>{tx.complete[0]}</a>
          </div>
        )}
      </div>

      <input type="date" name="" id="" />
      <input type="datetime-local" name="" id="" />
      <input type="time" name="" id="" />
      <input type="month" name="" id="" />
      <input type="color" name="" id="" />

      <Button onClick={() => dispatch(refreshDOM())}>Refresh DOM</Button>
      <Button onClick={() => dispatch(refreshDOM(2))}>Refresh Balance</Button>

      <Button
        onClick={async () => {
          const tx = `0x${Math.random()}`;
          dispatch(addTxIfNotDuplicate({ type: 'pending', tx }));

          await delay(2000);
          dispatch(removeTxIfExist({ type: 'pending', tx }));
          dispatch(addTxIfNotDuplicate({ type: 'complete', tx }));
        }}
      >
        Add Tx Pending
      </Button>
      <Button
        onClick={() =>
          dispatch(removeTxIfExist({ type: 'pending', tx: '0x01' }))
        }
      >
        Remove Tx Pending
      </Button>

      <Button
        onClick={() => {
          const tx = `0x${Math.random()}`;
          dispatch(addTxIfNotDuplicate({ type: 'complete', tx }));
        }}
      >
        Add Tx Complete
      </Button>
      <Button
        onClick={() => dispatch(removeTx({ type: 'complete', tx: '0x01' }))}
      >
        Remove Tx Complete
      </Button>

      <div className="border">
        <Datepicker
          useRange={false}
          asSingle={true}
          minDate={subDays(new Date(), 1)}
          maxDate={addDays(new Date(), 10)}
          value={value}
          onChange={handleValueChange}
        />
      </div>

      <Button onClick={address ? disconnect : connect}>
        {address ? 'Disconnect' : 'Connect'} Wallet
      </Button>

      <Tooltip
        renderLink={({}) => <div>{address}</div>}
        renderContent={() => <div>{address}</div>}
      />
      <div>{chainId}</div>

      <Modal
        renderLink={({ onOpen }) => (
          <div className="" onClick={onOpen}>
            Open Modal
          </div>
        )}
        renderContent={({}) => (
          <div>
            Content Modal
            <Pagination
              current={1}
              total={10}
              onChange={(attrs) => {
                console.log('Attrs:', attrs);
              }}
            />
          </div>
        )}
      />

      <Select
        options={[
          { label: 'A', value: 'a' },
          { label: 'B', value: 'b' },
        ]}
        onChange={(selected) => {
          console.log('Selected:', selected);
        }}
      />

      <motion.nav
        initial={false}
        animate={isOpen ? 'open' : 'closed'}
        className="bg-blue-500 w-80 mt-1 p-3"
      >
        <motion.button
          whileTap={{ scale: 0.97 }}
          onClick={() => setIsOpen(!isOpen)}
          className="flex justify-between items-center w-full bg-white rounded-[10px] px-2 py-1 text-lg text-blue-500 mb-[10px]"
        >
          Menu
          <motion.div
            variants={{
              open: { rotate: 180 },
              closed: { rotate: 0 },
            }}
            transition={{ duration: 0.2 }}
            style={{ originY: 0.55 }}
          >
            <svg width="15" height="15" viewBox="0 0 20 20">
              <path d="M0 7 L 20 7 L 10 16" className="fill-current" />
            </svg>
          </motion.div>
        </motion.button>
        <motion.ul
          className="flex flex-col gap-[10px] bg-white p-[10px] rounded-[10px]"
          variants={{
            open: {
              originX: '50%',
              originY: 0,
              scale: 1,
              // clipPath: 'inset(0% 0% 0% 0% round 10px)',
              transition: {
                type: 'spring',
                bounce: 0,
                duration: 0.7,
                delayChildren: 0.3,
                staggerChildren: 0.05,
              },
            },
            closed: {
              originX: '50%',
              originY: 0,
              scale: 0,
              // clipPath: 'inset(10% 50% 90% 50% round 10px)',
              transition: {
                type: 'spring',
                bounce: 0,
                duration: 0.3,
              },
            },
          }}
          style={{ pointerEvents: isOpen ? 'auto' : 'none' }}
        >
          <motion.li
            className="p-[10px] cursor-pointer text-blue-500 rounded-[10px] duration-500 hover:bg-blue-500 hover:bg-opacity-10"
            variants={itemVariants}
          >
            Item 1{' '}
          </motion.li>
          <motion.li
            className="p-[10px] cursor-pointer text-blue-500 rounded-[10px] duration-500 hover:bg-blue-500 hover:bg-opacity-10"
            variants={itemVariants}
          >
            Item 2{' '}
          </motion.li>
          <motion.li
            className="p-[10px] cursor-pointer text-blue-500 rounded-[10px] duration-500 hover:bg-blue-500 hover:bg-opacity-10"
            variants={itemVariants}
          >
            Item 3{' '}
          </motion.li>
          <motion.li
            className="p-[10px] cursor-pointer text-blue-500 rounded-[10px] duration-500 hover:bg-blue-500 hover:bg-opacity-10"
            variants={itemVariants}
          >
            Item 4{' '}
          </motion.li>
          <motion.li
            className="p-[10px] cursor-pointer text-blue-500 rounded-[10px] duration-500 hover:bg-blue-500 hover:bg-opacity-10"
            variants={itemVariants}
          >
            Item 5{' '}
          </motion.li>
        </motion.ul>
      </motion.nav>
    </div>
  );
};

Home.getLayout = function getLayout(page: React.ReactElement) {
  return (
    <Layout>
      <NestedLayout name="home">{page}</NestedLayout>
    </Layout>
  );
};

export default Home;
